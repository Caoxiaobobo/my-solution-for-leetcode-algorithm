/*
 Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example,
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6. 
*/

/*

	worst: O(n^2)

	首先找到最大的高度，然后在最大高度的左右两侧迭代，在两侧分别找到两侧的最大值，计算面积

    int trap(vector<int>& height) {
        if(height.size() <= 2)
            return 0;
        int max = -1 , maxi;
        int sum = 0;
        for(int i = 0; i < height.size(); i++)
            if(max < height[i]){
                maxi = i;
                max = height[i];
            }
        if(maxi > 1)
            solverL(height,maxi,sum);
        if(maxi < height.size()-1)    
            solverR(height,maxi,sum);
        return sum;
    }
    void solverL(vector<int>& height, int maxi, int& sum){
        int max = -1,maxl;
        for(int i = maxi-1; i >= 0; i--){
            if(max < height[i]){
                max = height[i];
                maxl = i;
            }
        }
        sum += min(height[maxl],height[maxi]) * (maxi - maxl - 1);
        for(int i = maxl + 1; i < maxi; i++){
            sum -= height[i];
        }
        while(maxl > 0 && height[maxl] == height[maxl-1]){
            maxl = maxl-1;
        }
        if(maxl > 1)
            solverL(height,maxl,sum);
    }
    void solverR(vector<int>& height, int maxi, int& sum){
        int max = -1, maxr;
        for(int i = maxi + 1; i < height.size(); i++){
            if(max < height[i]){
                max = height[i];
                maxr = i;
            }
        }
        sum += min(height[maxr],height[maxi]) * (maxr - maxi - 1);
        for(int i = maxi + 1; i < maxr; i++){
            sum -= height[i];
        }
        while(maxr < height.size()-1 && height[maxr] == height[maxr+1]){
            maxr = maxr + 1;
        }
        if(maxr <height.size()-2)
            solverR(height,maxr,sum);
    }

*/

/*

	improvemet: time :O(n) space: O(1)

	在上面的基础上进行改进，上述在找到最大值后从中间往两边查找最大值，而改进后，从两边往中间进行一次扫描

    int trap(vector<int>& height) {
        if(height.size() <= 2)
            return 0;
        int max = -1 , maxi;
        int sum = 0;
        for(int i = 0; i < height.size(); i++)
            if(max < height[i]){
                maxi = i;
                max = height[i];
            }
        int temp = 0,maxleft = height[0],maxright = height[height.size()-1];
        for(int i = 0; i < maxi; i++){
            if(height[i+1] >= maxleft){
                maxleft = height[i+1];
                sum += temp;
                temp = 0;
            }else{
                temp += maxleft - height[i+1];
            }
        }
        for(int i = height.size()-1;i > maxi;i--){
            if(height[i-1] >= maxright){
                maxright = height[i-1];
                sum +=temp;
                temp = 0;
            }else{
                temp += maxright - height[i-1];
            }
        }
        return sum;
    }

*/

/*

	better way, O(n)

	维护两个指针指向左右两边，分别从左向右和从右向左移动，并且分别维护左右两边所经过的最大值

	int trap(vector<int>& height) {
        if(height.size() < 2)
            return 0;
        int sum = 0;
        int maxleft = 0, maxright = 0;
        int left = 0, right = height.size() - 1;
        while(left <= right){
            if(height[left] <= height[right]){
                if(height[left] >= maxleft)
                    maxleft = height[left];
                else
                    sum += maxleft - height[left];
                left++;
            }else{
                if(height[right] >= maxright)
                    maxright = height[right];
                else
                    sum += maxright - height[right];
                right--;
            }
        }
        return sum;
    }

*/